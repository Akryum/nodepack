const Case = require('case')
const path = require('path')
const fs = require('fs-extra')
const globby = require('globby')

/** @type {import('@nodepack/service').ServicePlugin} */
exports.generateConfig = async (api, options) => {
  const cwd = api.getCwd()
  const outputFile = api.resolve('src/generated/config.d.ts')

  const imports = []
  const types = []
  const files = await globby('config/**/*.{js,ts}', {
    cwd,
    absolute: false,
    onlyFiles: true,
  })
  for (const file of files) {
    const absoluteFile = path.resolve(cwd, file)
    const content = await fs.readFile(absoluteFile, { encoding: 'utf8' })
    if (content.includes('export default')) {
      const type = Case.pascal(file.substr(0, file.lastIndexOf('.')))
      const [, key] = /(\w+)\.[jt]sx?$/.exec(file)
      const dir = path.dirname(file).split('/')
      dir.shift()
      const importPath = dir.length ? `${dir.join('/')}/${key}` : key
      imports.push(`import ${type} from '@config/${importPath}'`)
      types.push({
        key,
        value: type,
      })
    }
  }
  await fs.ensureFile(outputFile)

  const content = `// This file is auto-generated by @nodepack/plugin-typescript
 
/* eslint-disable */
/* tslint:disable */

${imports.join('\n')}

export default interface BaseConfig {
${types.map(t => `  ${t.key}: typeof ${t.value}`).join('\n')}
}

export type Config = BaseConfig
`
  await fs.writeFile(outputFile, content, { encoding: 'utf8' })
}
