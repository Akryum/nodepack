const Case = require('case')
const { resolveModule } = require('@nodepack/module')
const fs = require('fs-extra')

/** @type {import('@nodepack/service').ServicePlugin} */
exports.generateContext = (api, options) => {
  const imports = []
  const types = []
  for (const plugin of api.service.plugins) {
    const { id } = plugin
    const files = [
      `${id}/context.d.ts`,
      `${id}/dist/context.d.ts`,
      `${id}/types/context.d.ts`,
      `${id}/src/context.d.ts`,
    ]
    for (const file of files) {
      const resolvedFile = resolveModule(file, api.getCwd())
      if (!resolvedFile) {
        continue
      }
      const identifier = Case.pascal(plugin.id)
      imports.push(`import ${identifier} from '${file.substr(0, file.length - '.d.ts'.length)}'`)
      types.push(identifier)
      break
    }
  }

  const outputFile = api.resolve('src/generated/context.d.ts')
  fs.ensureFileSync(outputFile)

  const content = `// This file is auto-generated by @nodepack/plugin-typescript
 
/* eslint-disable */
/* tslint:disable */

${imports.join('\n')}

interface Empty {}

export type Context = Empty
${types.map(t => `  & ${t}`).join('\n')}

export default Context`
  fs.writeFileSync(outputFile, content, { encoding: 'utf8' })
}
