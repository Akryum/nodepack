const Case = require('case')
const { resolveModule } = require('@nodepack/module')
const path = require('path')
const fs = require('fs-extra')
const globby = require('globby')

/** @type {import('@nodepack/service').ServicePlugin} */
exports.generateContext = async (api, options) => {
  const cwd = api.getCwd()
  const imports = []
  const types = []

  // Plugins
  for (const plugin of api.service.plugins) {
    const { id } = plugin
    const files = [
      `${id}/context.d.ts`,
      `${id}/dist/context.d.ts`,
      `${id}/types/context.d.ts`,
      `${id}/src/context.d.ts`,
    ]
    for (const file of files) {
      const resolvedFile = resolveModule(file, cwd)
      if (!resolvedFile) {
        continue
      }
      const identifier = Case.pascal(plugin.id)
      imports.push(`import ${identifier} from '${file.substr(0, file.length - '.d.ts'.length)}'`)
      types.push(identifier)
      break
    }
  }

  // Context files
  const files = await globby(`${options.srcDir || 'src'}/context/**/*.{js,ts}`, {
    cwd,
    absolute: false,
    onlyFiles: true,
  })
  let firstFile = true
  for (const file of files) {
    const absoluteFile = path.resolve(cwd, file)
    const content = await fs.readFile(absoluteFile, { encoding: 'utf8' })
    if (content.includes('export default')) {
      const [, key] = /(\w+)\.[jt]sx?$/.exec(file)
      const dir = path.dirname(file).split('/').slice(2)
      const importPath = dir.length ? `${dir.join('/')}/${key}` : key
      const type = Case.pascal(importPath)
      if (firstFile) {
        imports.push(`// Project context files`)
        firstFile = false
      }
      imports.push(`import ${type} from '@/context/${importPath}'`)
      types.push(type)
    }
  }

  const outputFile = api.resolve('src/generated/context.d.ts')
  await fs.ensureFile(outputFile)

  const content = `// This file is auto-generated by @nodepack/plugin-typescript
 
/* eslint-disable */
/* tslint:disable */

// Config
import ProjectConfigBase from './config'
// Plugins
${imports.join('\n')}

interface ContextBase {
  config: ProjectConfigBase
}

export type Context = ContextBase
${types.map(t => `  & ${t}`).join('\n')}

export default Context
`
  await fs.writeFile(outputFile, content, { encoding: 'utf8' })
}
